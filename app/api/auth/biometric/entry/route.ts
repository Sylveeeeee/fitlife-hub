import { NextResponse } from "next/server";
import {prisma} from "@/lib/prisma";
import jwt from "jsonwebtoken";
import { getUserProfile } from '@/lib/userService';
import { calculateTDEE, calculateMacroTargets } from '@/utils/calculations';

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
async function verifyUser(req: Request) {
  const cookies = req.headers.get("cookie");
  if (!cookies) return null;

  const token = cookies
    .split(";")
    .find((cookie) => cookie.trim().startsWith("token="))
    ?.split("=")[1];

  if (!token) return null;

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as jwt.JwtPayload & { userId: string };
    return { userId: Number(decoded.userId) };
  } catch (err) {
    console.error("JWT Error:", err);
    return null;
  }
}

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô Diary ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
export async function GET(req: Request) {
  const user = await verifyUser(req);
  if (!user) return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

  const url = new URL(req.url);
  const date = url.searchParams.get("date");

  if (!date) {
    return NextResponse.json({ error: "Date is required" }, { status: 400 });
  }

  try {
    const biometricEntries = await prisma.biometricEntry.findMany({
      where: {
        userId: user.userId,
        recordedAt: date,
      },
      include: {
        metric: true, // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Metric ‡πÄ‡∏ä‡πà‡∏ô Weight, Body Fat
        category: true, // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category
      },
      orderBy: {
        recordedAt: "asc",
      },
    });

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    const chartData = biometricEntries.map((entry) => ({
      label: entry.metric.name,
      value: entry.value,
      category: entry.category.name,
      recordedAt: entry.recordedAt,
    }));

    return NextResponse.json({ data: chartData }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Error fetching biometric entries:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}


// ‚úÖ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô Diary
export async function POST(req: Request) {
  const user = await verifyUser(req);
  if (!user) return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

  try {
    // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å request body
    const requestBody = await req.json();
    console.log("üì• Received Data:", requestBody);

    const { categoryId, metricId, value, unit, date } = requestBody;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!categoryId || !metricId || value === undefined || !unit || !date) {
      console.error("üö® Missing required fields:", { categoryId, metricId, value, unit, date });
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö categoryId ‡πÅ‡∏•‡∏∞ metricId ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const categoryExists = await prisma.biometricCategory.findUnique({ where: { id: categoryId } });
    if (!categoryExists) {
      console.error("üö® Invalid categoryId:", categoryId);
      return NextResponse.json({ error: "Invalid category ID" }, { status: 400 });
    }

    const metricExists = await prisma.biometricMetric.findUnique({ where: { id: metricId } });
    if (!metricExists) {
      console.error("üö® Invalid metricId:", metricId);
      return NextResponse.json({ error: "Invalid metric ID" }, { status: 400 });
    }

    console.log("üìÖ Date received:", date);

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Biometric Entry ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const newEntry = await prisma.biometricEntry.create({
      data: {
        userId: user.userId,
        categoryId,
        metricId,
        value: parseFloat(value),
        unit,
        recordedAt: new Date(date).toISOString().split("T")[0],
      },
    });

    console.log("‚úÖ Successfully added biometric entry:", newEntry);
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤ metricId ‡πÄ‡∏õ‡πá‡∏ô "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å" ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö users.weight
    if (unit === "kg") {
      await prisma.users.update({
        where: { id: user.userId },
        data: { weight: parseFloat(value) },
      });
      console.log(`‚úÖ Updated user weight to ${value} kg`);
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å userService ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
    const userProfile = await getUserProfile(user.userId);

    if (!userProfile) {
      return NextResponse.json({ error: "User profile not found" }, { status: 404 });
    }

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì TDEE ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const formattedProfile = {
      weight: userProfile.weight ?? 70, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
      height: userProfile.height ?? 170, 
      age: userProfile.age ?? 25, 
      sex: userProfile.sex ?? "male",
      activityLevel: userProfile.activity_level || "sedentary",
    };

    const tdee = calculateTDEE(formattedProfile);
    const { protein, carbs, fat } = calculateMacroTargets(tdee);

    // ‚úÖ ‡πÉ‡∏ä‡πâ upsert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï diet_goals
    const updatedGoals = await prisma.diet_goals.upsert({
      where: { user_id: user.userId },
      update: {
        daily_calories: tdee,
        daily_protein: protein,
        daily_carbs: carbs,
        daily_fat: fat,
        updated_at: new Date(),
      },
      create: {
        user_id: user.userId,
        daily_calories: tdee,
        daily_protein: protein,
        daily_carbs: carbs,
        daily_fat: fat,
      },
    });

    console.log("‚úÖ Updated diet goals:", updatedGoals);

    return NextResponse.json(
      {
        biometricEntry: newEntry,
        updatedDietGoals: updatedGoals,
      },
      { status: 201 }
    );

  } catch (error) {
    console.error("‚ùå Database error:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// ‚úÖ PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
export async function PUT(req: Request, { params }: { params: { id: string } }) {
  const user = await verifyUser(req);
  if (!user) return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

  const entryId = Number(params.id);
  if (isNaN(entryId)) return NextResponse.json({ error: "Invalid ID" }, { status: 400 });

  const { categoryId, value, unit, date } = await req.json();

  if (value === undefined) {
    return NextResponse.json({ error: "Value is required" }, { status: 400 });
  }

  try {
    const updatedEntry = await prisma.biometricEntry.update({
      where: { id: entryId, userId: user.userId },
      data: {
        categoryId, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° categoryId ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ
        value: parseFloat(value),
        unit,
        recordedAt: date,
      },
    });

    return NextResponse.json(updatedEntry, { status: 200 });
  } catch (error) {
    console.error("‚ùå Error updating biometric entry:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// ‚úÖ DELETE: ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
export async function DELETE(req: Request, { params }: { params: { id: string } }) {
  const user = await verifyUser(req);
  if (!user) return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

  const entryId = Number(params.id);
  if (isNaN(entryId)) return NextResponse.json({ error: "Invalid ID" }, { status: 400 });

  try {
    await prisma.biometricEntry.delete({
      where: { id: entryId, userId: user.userId },
    });

    return NextResponse.json({ message: "Biometric entry deleted successfully" }, { status: 204 });
  } catch (error) {
    console.error("‚ùå Error deleting biometric entry:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}
