import { NextRequest, NextResponse } from "next/server";
import { getUserIdFromToken } from "@/lib/authService"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
import { prisma } from "@/lib/prisma"; // Prisma instance

// ‚úÖ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤ Food Diary
export async function POST(req: NextRequest, { params }: { params: { date?: string } }) {
  try {
    const date = params?.date;
    if (!date) {
      return NextResponse.json({ error: "Missing date parameter" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userId = await getUserIdFromToken(req);
    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö request body
    const body = await req.json();
    const { meal_type, food_id, quantity, calories, protein, carbs, fat } = body;

    if (!meal_type || !food_id || quantity == null || calories == null || protein == null || carbs == null || fat == null) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
    }

    // ‚úÖ ‡πÉ‡∏ä‡πâ Transaction ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á DB
    const [diaryEntry] = await prisma.$transaction([
      prisma.foodDiary.create({
        data: {
          userId,
          date,
          mealType: meal_type,
          foodId: food_id,
          quantity,
          calories,
          protein,
          carbs,
          fat,
        },
        include: { food: true },
      }),

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà
      prisma.foods.update({
        where: { id: food_id },
        data: { added_count: { increment: 1 } },
      }),

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      prisma.user_behavior_logs.create({
        data: {
          userId,
          action: "Add Food to Diary",
        }
      }),
    ]);

    console.log("‚úÖ Food added to diary:", diaryEntry);
    return NextResponse.json(diaryEntry, { status: 201 });

  } catch (error) {
    console.error("‚ùå Error saving food diary:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Food Diary
export async function GET(req: NextRequest, { params }: { params: { date?: string } }) {
  try {
    const date = params?.date;
    if (!date) {
      return NextResponse.json({ error: "Missing date parameter" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userId = await getUserIdFromToken(req);
    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database
    const diaryEntries = await prisma.foodDiary.findMany({
      where: { userId, date },
      include: { food: { select: { id: true, name: true, unit: true } } },
    });

    console.log("üìñ Diary Entries from API:", diaryEntries);
    return NextResponse.json(diaryEntries, { status: 200 });

  } catch (error) {
    console.error("‚ùå Error fetching diary entries:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// ‚úÖ DELETE: ‡∏•‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Food Diary
export async function DELETE(req: NextRequest, { params }: { params: { date?: string } }) {
  try {
    const date = params?.date;
    if (!date) {
      return NextResponse.json({ error: "Missing date parameter" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userId = await getUserIdFromToken(req);
    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö request body
    const body = await req.json();
    const { food_id, meal_type } = body;

    if (!food_id || !meal_type) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
    }

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    const existingEntry = await prisma.foodDiary.findFirst({
      where: { userId, date, foodId: food_id, mealType: meal_type },
    });

    if (!existingEntry) {
      return NextResponse.json({ error: "Food entry not found" }, { status: 404 });
    }

    await prisma.$transaction([
      // ‚úÖ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà
      prisma.foodDiary.delete({ where: { id: existingEntry.id } }),

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà
      prisma.foods.update({
        where: { id: food_id },
        data: { added_count: { decrement: 1 } },
      }),
    ]);

    console.log("‚úÖ Food entry deleted:", existingEntry);
    return NextResponse.json({ message: "Food entry deleted successfully" }, { status: 200 });

  } catch (error) {
    console.error("‚ùå Error deleting food diary entry:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
