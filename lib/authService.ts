import jwt from "jsonwebtoken";
import { cookies } from "next/headers";

interface DecodedToken {
  userId: number;
  role: string;
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å Token
export async function getUserIdFromToken(req: Request): Promise<number | null> {
  try {
    // üîπ ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Header ‡∏´‡∏£‡∏∑‡∏≠ Cookies
    const authHeader = req.headers.get("Authorization");
    const cookieStore = await cookies(); // ‚úÖ ‡πÉ‡∏ä‡πâ await ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ cookies
    const tokenFromCookie = cookieStore.get("token")?.value; // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ token ‡∏à‡∏≤‡∏Å cookie

    let token: string | undefined;

    if (authHeader && authHeader.startsWith("Bearer ")) {
      token = authHeader.split(" ")[1]; // ‚úÖ ‡πÉ‡∏ä‡πâ Token ‡∏à‡∏≤‡∏Å Header
    } else if (tokenFromCookie) {
      token = tokenFromCookie; // ‚úÖ ‡πÉ‡∏ä‡πâ Token ‡∏à‡∏≤‡∏Å Cookies
    }

    if (!token) {
      console.error("‚ùå Unauthorized: Token not provided");
      return null;
    }

    // üîπ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Token
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as DecodedToken;
    if (!decoded.userId) {
      console.error("‚ùå Unauthorized: Invalid token payload");
      return null;
    }

    console.log("üîë Decoded User ID:", decoded.userId);
    return decoded.userId; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ userId

  } catch (error) {
    console.error("‚ùå Error decoding token:", error);
    return null;
  }
}
